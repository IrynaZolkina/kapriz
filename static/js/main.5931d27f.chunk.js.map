{"version":3,"sources":["components/components/Menuitem.js","components/components/Directory.js","components/pages/Homepage.js","App.js","serviceWorker.js","index.js"],"names":["MenuItem","title","imageUrl","titleFront","titleBack","size","history","linkUrl","match","className","style","backgroundImage","toUpperCase","Directory","state","sections","id","key","this","Component","Homepage","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0NA2BeA,EAxBE,SAAC,GAAD,IACfC,EADe,EACfA,MAGAC,GAJe,EAEfC,WAFe,EAGfC,UAHe,EAIfF,UACAG,EALe,EAKfA,KALe,EAMfC,QANe,EAOfC,QAPe,EAQfC,MARe,OAUf,yBAAKC,UAAS,UAAKJ,EAAL,gBACZ,yBACEI,UAAU,mBACVC,MAAO,CACLC,gBAAgB,OAAD,OAAST,EAAT,QAGnB,yBAAKO,UAAU,WACb,wBAAIA,UAAU,SAASR,EAAMW,eAC7B,0BAAMH,UAAU,YAAhB,eC4ESI,E,kDAxFb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXC,SAAU,CACR,CACEd,MAAO,OACPE,WAAY,GACZD,SACE,sJACFc,GAAI,EACJT,QAAS,YACTF,KAAM,SAER,CACEJ,MAAO,UACPE,WAAY,2BACZD,SACE,2JACFc,GAAI,EACJT,QAAS,eACTF,KAAM,UAER,CACEJ,MAAO,WACPC,SAAU,wCACVc,GAAI,EACJT,QAAS,gBACTF,KAAM,SAxBA,aA2BNJ,MAAO,SACPC,SAAU,sCACVG,KAAM,QACNW,GAAI,EACJT,QAAS,eA/BH,OAgCA,SAhCA,aAmCNN,MAAO,OACPC,SAAU,mCACVG,KAAM,QACNW,GAAI,EACJT,QAAS,aAvCH,OAwCA,WA5CA,E,qDAmDZ,OACE,yBAAKE,UAAU,kBACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,wBACb,8BAEF,yBAAKA,UAAU,uBACb,kBAAC,EAAD,CACEQ,IAAKC,KAAKJ,MAAMC,SAAS,GAAGC,GAC5Bf,MAAOiB,KAAKJ,MAAMC,SAAS,GAAGd,MAC9BE,WAAYe,KAAKJ,MAAMC,SAAS,GAAGZ,WACnCD,SAAUgB,KAAKJ,MAAMC,SAAS,GAAGb,SACjCG,KAAMa,KAAKJ,MAAMC,SAAS,GAAGV,SAKnC,yBAAKI,UAAU,oBACb,yBAAKA,UAAU,wBACb,4BAAKS,KAAKJ,MAAMC,SAAS,GAAGd,OAC3BiB,KAAKJ,MAAMC,SAAS,GAAGZ,YAE1B,yBAAKM,UAAU,uBACb,kBAAC,EAAD,CACEQ,IAAKC,KAAKJ,MAAMC,SAAS,GAAGC,GAC5Bf,MAAOiB,KAAKJ,MAAMC,SAAS,GAAGd,MAC9BE,WAAYe,KAAKJ,MAAMC,SAAS,GAAGZ,WACnCD,SAAUgB,KAAKJ,MAAMC,SAAS,GAAGb,SACjCG,KAAMa,KAAKJ,MAAMC,SAAS,GAAGV,c,GAhFnBc,aCCTC,EANE,kBACf,yBAAKX,UAAU,YACb,kBAAC,EAAD,QCMWY,E,uKAPX,OACE,6BACE,kBAAC,EAAD,W,GAJUF,aCSEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASjB,MACvB,2DCZNkB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5931d27f.chunk.js","sourcesContent":["import React from \"react\";\r\n/* import { withRouter } from \"react-router-dom\";\r\n */\r\nconst MenuItem = ({\r\n  title,\r\n  titleFront,\r\n  titleBack,\r\n  imageUrl,\r\n  size,\r\n  history,\r\n  linkUrl,\r\n  match,\r\n}) => (\r\n  <div className={`${size} menu-item `}>\r\n    <div\r\n      className=\"background-image\"\r\n      style={{\r\n        backgroundImage: `url(${imageUrl})`,\r\n      }}\r\n    />\r\n    <div className=\"content\">\r\n      <h1 className=\"title\">{title.toUpperCase()}</h1>\r\n      <span className=\"subtitle\">SHOP NOW</span>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default MenuItem;\r\n//export default withRouter(MenuItem);\r\n","import React, { Component } from \"react\";\r\n/* import { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\n\r\nimport { selectDirectorySections } from \"../redux/directory/directorySelectors\";*/\r\n\r\nimport MenuItem from \"./Menuitem\";\r\n//import im from \"../../images/homepage-img/\";\r\n\r\nclass Directory extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      sections: [\r\n        {\r\n          title: \"hats\",\r\n          titleFront: \"\",\r\n          imageUrl:\r\n            \"https://firebasestorage.googleapis.com/v0/b/cat2-ac7df.appspot.com/o/Navbar%20images%2Fhp1.png?alt=media&token=e1edb285-d201-4238-9eb6-b8df71285368\",\r\n          id: 1,\r\n          linkUrl: \"shop/hats\",\r\n          size: \"l-img\",\r\n        },\r\n        {\r\n          title: \"jackets\",\r\n          titleFront: \"hathhhhhhhhhhhhhhhhhhhhs\",\r\n          imageUrl:\r\n            \"https://firebasestorage.googleapis.com/v0/b/cat2-ac7df.appspot.com/o/Navbar%20images%2Fdownload.jpg?alt=media&token=e4e397c9-b870-474f-97be-977da7244863\",\r\n          id: 2,\r\n          linkUrl: \"shop/jackets\",\r\n          size: \"xl-img\",\r\n        },\r\n        {\r\n          title: \"sneakers\",\r\n          imageUrl: \"https://i.ibb.co/0jqHpnp/sneakers.png\",\r\n          id: 3,\r\n          linkUrl: \"shop/sneakers\",\r\n          size: \"s-img\",\r\n        },\r\n        {\r\n          title: \"womens\",\r\n          imageUrl: \"https://i.ibb.co/GCCdy8t/womens.png\",\r\n          size: \"large\",\r\n          id: 4,\r\n          linkUrl: \"shop/womens\",\r\n          size: \"m-img\",\r\n        },\r\n        {\r\n          title: \"mens\",\r\n          imageUrl: \"https://i.ibb.co/R70vBrQ/men.png\",\r\n          size: \"large\",\r\n          id: 5,\r\n          linkUrl: \"shop/mens\",\r\n          size: \"l-img\",\r\n        },\r\n      ],\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"directory-menu\">\r\n        <div className=\"directory-list-1\">\r\n          <div className=\"directory-list-title\">\r\n            <h1></h1>\r\n          </div>\r\n          <div className=\"directory-list-menu\">\r\n            <MenuItem\r\n              key={this.state.sections[0].id}\r\n              title={this.state.sections[0].title}\r\n              titleFront={this.state.sections[0].titleFront}\r\n              imageUrl={this.state.sections[0].imageUrl}\r\n              size={this.state.sections[0].size}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"directory-list-2\">\r\n          <div className=\"directory-list-title\">\r\n            <h1>{this.state.sections[1].title}</h1>\r\n            {this.state.sections[1].titleFront}\r\n          </div>\r\n          <div className=\"directory-list-menu\">\r\n            <MenuItem\r\n              key={this.state.sections[1].id}\r\n              title={this.state.sections[1].title}\r\n              titleFront={this.state.sections[1].titleFront}\r\n              imageUrl={this.state.sections[1].imageUrl}\r\n              size={this.state.sections[1].size}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Directory;\r\n/* \r\nrender() {\r\n  return (\r\n    <div className=\"directory-menu\">\r\n      {this.state.sections.map(\r\n        ({ id, titleFront, title, imageUrl, size }) => (\r\n          <div className=\"directory-list\">\r\n            <div className=\"directory-list-title\">\r\n              <h1></h1>\r\n              {titleFront}\r\n            </div>\r\n            <div className=\"directory-list-menu\">\r\n              <MenuItem\r\n                key={id}\r\n                title={title}\r\n                titleFront={titleFront}\r\n                imageUrl={imageUrl}\r\n                size={size}\r\n              />\r\n            </div>\r\n          </div>\r\n        )\r\n      )}\r\n      \r\n    </div>\r\n  );\r\n} */\r\n\r\n//export default connect(mapStateToProps)(Directory);\r\n/* const mapStateToProps = createStructuredSelector({\r\n  sections: selectDirectorySections\r\n}); */\r\n","import React from \"react\";\r\n\r\nimport Directory from \"../components/Directory\";\r\n\r\nconst Homepage = () => (\r\n  <div className=\"homepage\">\r\n    <Directory />\r\n  </div>\r\n);\r\n\r\nexport default Homepage;\r\n","import React, { Component } from \"react\";\nimport Homepage from \"./components/pages/Homepage\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Homepage />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}